# Flutter get API call with Null Safety:
### 1. Go to the website -> ## jsonplaceholder ### ->Go Routes ->Get /Posts->copy the URL ->Check this URL in PostMan.
### 2. Go to the Flutter project -> go pubspec.yaml and pubget http: ^0.13.4 -> and import http package (import 'package:http/http.dart' as http;)
### 3. When we install plugins in flutter project ,it's not working untill there's exist a name of api's object or array.So theres's a problem to create a exact moel we want.For this go to the lib of flutter project and create a directory named-> Models.
### 4. Again go to the Models -> New ->Json To Dart -> create class name (PostsModel) -> if our project show null safety then click this ->now copy paste the api code from the PostsMan and generate it.
### 5. We see that there's only the object is created in PostsModel, for this there is no array or list exist,that's why we have to initialize the array or list in our code.And make a custom list:
Go to the home page ->
write the code of Future function under class:
.......................
class _HomScreenState extends State<HomScreen> {



  List<PostsModel> postList = [];

  Future<List<PostsModel>> getPostApi() async {
    final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/posts'));
    var data = jsonDecode(response.body.toString());

    if (response.statusCode == 200) {
      for (Map i in data) {
        postList.add(PostsModel.fromJson(i));
      }
      return postList;
    } else {
      return postList;
    }
  }




  @override
  Widget build(BuildContext context) {
    return Scaffold();
  }
}....................

### For this our API is hit in our flutter project.
### 6.Now we have to show this API:
Write the code under body:


......................
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text("Api Course"),
    ), // AppBar


    body: Column(
      children: [
        Expanded(
          child: FutureBuilder(
            future: getPostApi(),
            builder: (context, snapshot) {
              if (!snapshot.hasData) {
                return Text("Loading...");
              } else {
                return ListView.builder(
                  itemCount: postList.length,
                  itemBuilder: (context, index) {
                    return Text(postList[index].title.toString());
                  },
                );
              }
            },
          ), // FutureBuilder
        ), // Expanded
      ],
    ), // Column
  ); // Scaffold
}
...........................










Explanation of the Code Line by Line:
dart
Copy
Edit
class _HomScreenState extends State<HomScreen> {
This defines a class _HomScreenState that extends State<HomScreen>, meaning it is a stateful widget.
HomScreen is presumably a screen widget in the app.
The underscore (_) before the class name means it is private to the file.
dart
Copy
Edit
List<PostsModel> postList = [];
This declares a list named postList, which will hold objects of type PostsModel.
It is initially empty and will later store data fetched from an API.
dart
Copy
Edit
Future<List<PostsModel>> getPostApi() async {
This function getPostApi() is an asynchronous function (async keyword) that fetches data from an API.
It returns a Future<List<PostsModel>>, meaning it will eventually return a list of PostsModel objects.
dart
Copy
Edit
final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/posts'));
This line makes an HTTP GET request to the API https://jsonplaceholder.typicode.com/posts.
The await keyword is used to wait for the response from the API before moving to the next line.
dart
Copy
Edit
var data = jsonDecode(response.body.toString());
response.body contains the raw JSON response from the API.
jsonDecode(response.body.toString()) converts this JSON string into a Dart object, usually a List<Map>.
dart
Copy
Edit
if (response.statusCode == 200) {
This checks if the API request was successful.
A statusCode of 200 means the request was successful and data was received.
dart
Copy
Edit
for (Map i in data) {
  postList.add(PostsModel.fromJson(i));
}
This loops through each element (Map i) in data (which is a list of JSON objects).
PostsModel.fromJson(i) converts each JSON object into a PostsModel instance.
The converted object is then added to the postList.
dart
Copy
Edit
return postList;
After processing the data, the function returns the postList, which now contains a list of PostsModel objects.
dart
Copy
Edit
} else {
  return postList;
}
If the response status is not 200 (meaning there was an error), it simply returns the empty postList.
dart
Copy
Edit
@override
Widget build(BuildContext context) {
  return Scaffold();
}
This is the build method, which returns a Scaffold widget (an empty screen for now).
Scaffold is a basic structure in Flutter that provides a layout for app screens.
How the Code Works:
When the screen (widget) is initialized, postList is an empty list.
The getPostApi() function is called asynchronously to fetch data from the API.
The API response is received and decoded into a Dart object.
If the response is successful (statusCode == 200):
It loops through the JSON data.
Converts each JSON object into a PostsModel object.
Adds each object to postList.
Returns the updated list.
If the response is not successful, it simply returns an empty list.
The build method returns an empty screen (Scaffold), but this can be expanded to display the postList in a widget like ListView.
Potential Improvements:
Handle API errors properly (e.g., show an error message).
Use setState to update the UI after fetching data.
Display the fetched posts in a UI widget like ListView.builder().




### To arrange more suitable form write this in reuturn :
