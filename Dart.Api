CODE EXPLANATION OF API FETCHED FROM jasonplaceholder site:
🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯

🖥️ 1. Flutter get API call with Null Safety: (Plugins make the Model) 

.......................
class _HomScreenState extends State<HomScreen> {
  List<PostsModel> postList = [];

  Future<List<PostsModel>> getPostApi() async {
    final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/posts'));
    var data = jsonDecode(response.body.toString());

    if (response.statusCode == 200) {
      for (Map i in data) {
        postList.add(PostsModel.fromJson(i));
      }
      return postList;
    } else {
      return postList;
    }
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold();
  }
}....................


🔐🗝️  Full description of this code:


✨ class _HomScreenState extends State<HomScreen> { ✨

This defines a class _HomScreenState that extends State<HomScreen>, meaning it is a stateful widget.
HomScreen is presumably a screen widget in the app.
The underscore (_) before the class name means it is private to the file.


✨ List<PostsModel> postList = []; ✨

This declares a list named postList, which will hold objects of type PostsModel.
It is initially empty and will later store data fetched from an API.


✨ Future<List<PostsModel>> getPostApi() async { ✨

This function getPostApi() is an asynchronous function (async keyword) that fetches data from an API.
It returns a Future<List<PostsModel>>, meaning it will eventually return a list of PostsModel objects.


✨ final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/posts')); ✨

This line makes an HTTP GET request to the API https://jsonplaceholder.typicode.com/posts.
The await keyword is used to wait for the response from the API before moving to the next line.


✨ var data = jsonDecode(response.body.toString()); ✨

response.body contains the raw JSON response from the API.
jsonDecode(response.body.toString()) converts this JSON string into a Dart object, usually a List<Map>.


✨ if (response.statusCode == 200) { ✨

This checks if the API request was successful.
A statusCode of 200 means the request was successful and data was received.


✨ for (Map i in data) { 
  postList.add(PostsModel.fromJson(i));
} ✨

This loops through each element (Map i) in data (which is a list of JSON objects).
PostsModel.fromJson(i) converts each JSON object into a PostsModel instance.
The converted object is then added to the postList.


✨ return postList; ✨

After processing the data, the function returns the postList, which now contains a list of PostsModel objects.


✨ } else { 
  return postList;
} ✨

If the response status is not 200 (meaning there was an error), it simply returns the empty postList.


✨ @override
Widget build(BuildContext context) {
  return Scaffold();
} ✨

This is the build method, which returns a Scaffold widget (an empty screen for now).
Scaffold is a basic structure in Flutter that provides a layout for app screens.


🔐🗝️ How the Code Works:

When the screen (widget) is initialized, postList is an empty list.
The getPostApi() function is called asynchronously to fetch data from the API.
The API response is received and decoded into a Dart object.
If the response is successful (statusCode == 200):
It loops through the JSON data.
Converts each JSON object into a PostsModel object.
Adds each object to postList.
Returns the updated list.
If the response is not successful, it simply returns an empty list.
The build method returns an empty screen (Scaffold), but this can be expanded to display the postList in a widget like ListView.


🔐🗝️ Potential Improvements:
Handle API errors properly (e.g., show an error message).
Use setState to update the UI after fetching data.
Display the fetched posts in a UI widget like ListView.builder().



🔐🗝️ For this our API is hit in our flutter project.
🗝️ 6.Now we have to show this API:

Write the code under body:

......................
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text("Api Course"),
    ), // AppBar

    body: Column(
      children: [
        Expanded(
          child: FutureBuilder(
            future: getPostApi(),
            builder: (context, snapshot) {
              if (!snapshot.hasData) {
                return Text("Loading...");
              } else {
                return ListView.builder(
                  itemCount: postList.length,
                  itemBuilder: (context, index) {
                    return Text(postList[index].title.toString());
                  },
                );
              }
            },
          ), // FutureBuilder
        ), // Expanded
      ],
    ), // Column
  ); // Scaffold
}
...........................


🔐🗝️  Full description of this code:

1️⃣ body: Column(
This defines the body of the Scaffold widget and uses a Column to structure the UI vertically.
2️⃣ children: [
The Column widget takes a list of children, meaning multiple widgets can be added inside it.
3️⃣ Expanded(
This ensures that the child widget (inside Expanded) takes all available space.
4️⃣ child: FutureBuilder(
FutureBuilder is used to handle asynchronous data fetching. It waits for the API response and updates the UI accordingly.
5️⃣ future: getPostApi(),
The future parameter is assigned the function getPostApi(), which fetches data from an API.
6️⃣ builder: (context, snapshot) {
The builder function defines how the UI should be built based on the state of snapshot, which holds the response of the future (getPostApi()).
7️⃣ if (!snapshot.hasData) {
This checks if the snapshot has no data, meaning the API call is still in progress.
8️⃣ return Text("Loading...");
If data is not available yet, it shows a "Loading..." message.
9️⃣ } else {
Once data is available, execution moves to this block.
🔟 return ListView.builder(
ListView.builder dynamically creates a scrollable list based on the API data.
1️⃣1️⃣ itemCount: postList.length,
Specifies the number of items in the list, based on the length of postList, which contains the fetched API data.
1️⃣2️⃣ itemBuilder: (context, index) {
This function builds each item in the list, iterating through postList using an index.
1️⃣3️⃣ return Text(postList[index].title.toString());
Displays each post’s title as a Text widget. The title is converted to a string to ensure it is displayed correctly.


🔐🗝️ Working Process of the Code:
✨Starts Execution

✨The FutureBuilder calls getPostApi() to fetch data from an API.
✨Displays Loading Message

✨While waiting for data, snapshot.hasData is false, so "Loading..." is displayed.
✨Receives API Data

✨Once the API response is received, snapshot.hasData becomes true.
✨Builds ListView

✨ListView.builder creates a dynamic list using postList.length, displaying each title in a Text widget.

🔐🗝️ Final Output:
Before Data Loads → Shows "Loading...".
After Data Loads → Displays a list of titles fetched from the API.



🔐🗝️ To arrange more suitable form write this in reuturn with explanation :

This code builds a Card widget that displays data from an API, including a title and a body.

1️⃣ return Card(
The Card widget provides a material design card layout, giving the content a slightly elevated look with rounded corners and a shadow effect.
2️⃣ child: Padding(
The Padding widget adds spacing around its child.
const EdgeInsets.all(8.0) means 8 pixels of padding on all sides.
3️⃣ child: Column(
A Column is used to stack multiple widgets vertically inside the Card.
Everything inside this column is aligned top to bottom.
4️⃣ crossAxisAlignment: CrossAxisAlignment.start,
Aligns all child widgets to the left side (start) of the column.
5️⃣ children: [
A list of child widgets follows inside the column.
6️⃣ Text(
This displays the title of the post.
7️⃣ snapshot.data![index].title,
Retrieves the title from the API response (snapshot.data![index]).
8️⃣ style: const TextStyle(
Customizes the text appearance.
9️⃣ fontSize: 18,
Sets the font size to 18 pixels.
🔟 fontWeight: FontWeight.bold,
Makes the text bold.
1️⃣1️⃣ const SizedBox(height: 5),
Adds a 5-pixel gap between the title and the body text.
1️⃣2️⃣ Text(
Displays the body/content of the post.
1️⃣3️⃣ snapshot.data![index].body,
Retrieves the body text from the API.
1️⃣4️⃣ style: const TextStyle(fontSize: 16),
Sets the font size of the body text to 16 pixels.

🔐🗝️ How the Code Works Step by Step
✨Receives API Data

✨snapshot.data![index] contains the post data (title & body).
✨Creates a Card

✨A material-style card is built to contain the post.
✨Formats the Title

✨Displays the title in bold (18px).
✨Adds Spacing

✨SizedBox(height: 5) creates a small gap between the title and body.
✨Formats the Body

✨Displays the post body in a normal 16px font.

🔐🗝️ Final Output:

Each post appears inside a separate card with a title (bold) and body (regular).
Expected UI Output
📌 Example Post (in a Card)

Title: Post Title 
Body:  This is the post content... 


🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯


🖥️ 2.Flutter get API with null safety: (If plugins faild to create a Model)

1️⃣ API Call (getPhotos Function)

Future<List> getPhotos() async {
  final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/photos'));
  var data = jsonDecode(response.body.toString());

  if (response.statusCode == 200) {
    for (Map i in data) {
      Photos photos = Photos(
        title: i['title'], 
        url: i['url'], 
        id: i['id'], 
        thumbnailUrl: i['thumbnailUrl']
      );
      photosList.add(photos);
    }
    return photosList;
  } else {
    return photosList;
  }
}



🔹 What is this function doing?
✨ Makes an HTTP GET request

http.get(Uri.parse('https://jsonplaceholder.typicode.com/photos'))
Fetches a list of photos from the API.


✨ Decodes the JSON response

jsonDecode(response.body.toString())
Converts the raw JSON string into a Dart object (list of maps).


✨ Checks if the response is successful (statusCode == 200)

HTTP status code 200 means "OK," indicating the request was successful.
If successful, it loops through the JSON data.


✨ Extracts and stores data

Iterates over the API response (for (Map i in data) {}).
Creates an instance of the Photos class with extracted values.
Adds each Photos object to photosList.


✨ Returns the list of photos

The function finally returns the populated photosList.



2️⃣ FutureBuilder & ListView (Displaying API Data)

FutureBuilder(
  future: getPhotos(),
  builder: (context, AsyncSnapshot<List<Photos>> snapshot) {
    return ListView.builder(
      itemCount: photosList.length,
      itemBuilder: (context, index) {
        return ListTile(
          leading: CircleAvatar(
            backgroundImage: NetworkImage(snapshot.data![index].url.toString()),
          ),
          trailing: CircleAvatar(
            backgroundImage: NetworkImage(snapshot.data![index].thumbnailUrl.toString()),
          ),
          subtitle: Text(snapshot.data![index].title.toString()),
          title: Text('Note the id: ' + snapshot.data![index].id.toString()),
        );
      }
    );
  }
),


🔹 What is happening here?

✨ FutureBuilder calls getPhotos()
It fetches the photo list asynchronously.

✨ ListView.builder creates UI dynamically

✨ Uses itemCount: photosList.length to determine how many items to display.
itemBuilder generates UI for each photo.

✨ Displaying API data in ListTile

leading: CircleAvatar(...) → Displays the main image.
trailing: CircleAvatar(...) → Displays the thumbnail image.
subtitle: Text(snapshot.data![index].title.toString()) → Shows the photo title.
title: Text('Note the id: '+snapshot.data![index].id.toString()) → Displays the photo ID.


🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯

🖥️ 3. Flutter get API call with Null Safety: (Plugins make the Model) ->Complex Nested Object


1️⃣ API Call (getUserApi Function)

Future<List> getUserApi() async {
  final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/users'));

  var data = jsonDecode(response.body.toString());

  if (response.statusCode == 200) {
    for (Map i in data) {
      print(i['name']);
      userList.add(UserModel.fromJson(i as Map<String, dynamic>));
    }
    return userList;
  } else {
    return userList;
  }
}


🔹 What This Function Does
✨ Makes an HTTP GET request
http.get(Uri.parse('https://jsonplaceholder.typicode.com/users')) fetches a list of users from the API.

✨ Decodes the JSON response
jsonDecode(response.body.toString()) converts the JSON string into a Dart object (list of maps).

✨ Checks if the response is successful (statusCode == 200)
If successful, it loops through the JSON data.

✨ Extracts and stores user data
UserModel.fromJson(i as Map<String, dynamic>) converts each map into a UserModel object.
userList.add(UserModel.fromJson(...)) adds each user to the list.

✨ Returns the list of users
Finally, the function returns userList.



2️⃣ FutureBuilder & ListView (Displaying API Data)

FutureBuilder(
  future: getUserApi(),
  builder: (context, AsyncSnapshot<List<UserModel>> snapshot) {
    if (!snapshot.hasData) {
      return CircularProgressIndicator();
    } else {
      return ListView.builder(
        itemCount: userList.length,
        itemBuilder: (context, index) {
          return Card(
            child: Padding(
              padding: EdgeInsets.all(8.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ReusbaleRow(title: 'Name', value: snapshot.data![index].name.toString()),
                  ReusbaleRow(title: 'UserName', value: snapshot.data![index].username.toString()),
                  ReusbaleRow(title: 'Email', value: snapshot.data![index].email.toString()),
                  ReusbaleRow(
                    title: 'Address',
                    value: snapshot.data![index].address!.city.toString() +
                      snapshot.data![index].address!.geo!.lat.toString() +
                      snapshot.data![index].address!.geo!.lng.toString(),
                  ),
                ],
              ),
            ),
          );
        },
      );
    }
  },
),



🔹 What Happens Here?

✨ FutureBuilder calls getUserApi()
This function fetches user data asynchronously.

✨ Handles loading state
if (!snapshot.hasData) { return CircularProgressIndicator(); }
Shows a loading spinner until the data is available.

✨ Displays data using ListView.builder
Uses itemCount: userList.length to determine how many items to display.
itemBuilder generates UI for each user.

✨ Displays User Information in a Card
Uses the ReusbaleRow widget to display:
Name
Username
Email
Address (city + geo coordinates)


3️⃣ Custom Widget: ReusbaleRow

class ReusbaleRow extends StatelessWidget {
  String title, value;

  ReusbaleRow({Key? key, required this.title, required this.value}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.all(8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(title),
          Text(value),
        ],
      ),
    );
  }
}


🔹 What This Widget Does

✨ Takes two parameters: title and value
Example: ReusbaleRow(title: 'Name', value: 'John Doe')

✨ Creates a Row Layout
Text(title) → Displays the title (e.g., "Name")
Text(value) → Displays the value (e.g., "John Doe")

✨ Adds Padding
padding: EdgeInsets.all(8.0)

✨ Uses mainAxisAlignment: MainAxisAlignment.spaceBetween
Places the title on the left and the value on the right.


4️⃣ Issues and Fixes
⚠️ Issue 1: FutureBuilder Not Handling Errors Properly
Problem: If the API request fails, the app crashes.
Fix: Add proper ConnectionState and error handling.


✅ Fixed Code:

FutureBuilder(
  future: getUserApi(),
  builder: (context, AsyncSnapshot<List<UserModel>> snapshot) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return Center(child: CircularProgressIndicator());
    } else if (snapshot.hasError) {
      return Center(child: Text('Error: ${snapshot.error}'));
    } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
      return Center(child: Text('No data available'));
    }

    return ListView.builder(
      itemCount: snapshot.data!.length,
      itemBuilder: (context, index) {
        return Card(
          child: Padding(
            padding: EdgeInsets.all(8.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                ReusbaleRow(title: 'Name', value: snapshot.data![index].name),
                ReusbaleRow(title: 'UserName', value: snapshot.data![index].username),
                ReusbaleRow(title: 'Email', value: snapshot.data![index].email),
                ReusbaleRow(
                  title: 'Address',
                  value: snapshot.data![index].address!.city + ", " +
                         snapshot.data![index].address!.geo!.lat + ", " +
                         snapshot.data![index].address!.geo!.lng,
                ),
              ],
            ),
          ),
        );
      },
    );
  },
),




✅ Final Working Code

import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

class ExampleThree extends StatefulWidget {
  @override
  State<ExampleThree> createState() => _ExampleThreeState();
}

class _ExampleThreeState extends State<ExampleThree> {
  List<UserModel> userList = [];

  Future<List<UserModel>> getUserApi() async {
    final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/users'));
    var data = jsonDecode(response.body.toString());

    if (response.statusCode == 200) {
      for (var i in data) {
        userList.add(UserModel.fromJson(i));
      }
      return userList;
    } else {
      return [];
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Users API'),
        backgroundColor: Colors.blueAccent,
      ),
      body: Column(
        children: [
          Expanded(
            child: FutureBuilder<List<UserModel>>(
              future: getUserApi(),
              builder: (context, AsyncSnapshot<List<UserModel>> snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return Center(child: Text('No data available'));
                }

                return ListView.builder(
                  itemCount: snapshot.data!.length,
                  itemBuilder: (context, index) {
                    return Card(
                      child: Padding(
                        padding: EdgeInsets.all(8.0),
                        child: Column(
                          children: [
                            ReusbaleRow(title: 'Name', value: snapshot.data![index].name),
                            ReusbaleRow(title: 'Username', value: snapshot.data![index].username),
                            ReusbaleRow(title: 'Email', value: snapshot.data![index].email),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class ReusbaleRow extends StatelessWidget {
  final String title, value;

  ReusbaleRow({required this.title, required this.value});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [Text(title), Text(value)],
    );
  }
}

🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯


🖥️ 4. When we find complex api jason code in which that start from object and arry or list under this object :

✨ FutureBuilder (Important Part)
What is FutureBuilder?
FutureBuilder is used to handle asynchronous data (data that comes from an API or a database).
It listens to a Future and rebuilds the UI when the Future completes.


✨ FutureBuilder<ProductsModel>(
  future: getProductsApi(),
  builder: (context, snapshot) {
future: getProductsApi():     ............Calls the API function.
builder: (context, snapshot): ...............snapshot holds the API response.


✨ Handling API Response Inside FutureBuilder

✨ if(snapshot.hasData) {
✅ If data is available, show the API response.

✨ return ListView.builder(
  itemCount: snapshot.data!.data!.length,
  itemBuilder: (context, index) {
ListView.builder: ..................Dynamically displays a list of items from API.
itemCount: snapshot.data!.data!.length: ...........Number of items from API.
itemBuilder: ..............Creates each item dynamically.


✨ Displaying Shop Information

✨ ListTile(
  title: Text(snapshot.data!.data![index].shop!.name.toString()),
  subtitle: Text(snapshot.data!.data![index].shop!.shopemail.toString()),
  leading: CircleAvatar(
    backgroundImage: NetworkImage(snapshot.data!.data![index].shop!.image.toString()),
  ),
),
ListTile: ...............Shows shop name, email, and image.
backgroundImage: NetworkImage(url): ...............Loads image from the internet.


✨ Displaying Product Images (Horizontal List)

✨ Container(
  height: MediaQuery.of(context).size.height * .3,
  width: MediaQuery.of(context).size.width * 1,
  child: ListView.builder(
    scrollDirection: Axis.horizontal,
    itemCount: snapshot.data!.data![index].images!.length,
    itemBuilder: (context, position) {
      return Padding(
        padding: const EdgeInsets.only(right: 10),
        child: Container(
          height: MediaQuery.of(context).size.height * .25,
          width: MediaQuery.of(context).size.width * .5,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(10),
            image: DecorationImage(
              fit: BoxFit.cover,
              image: NetworkImage(snapshot.data!.data![index].images![position].url.toString())
            )
          ),
        ),
      );
    }
  ),
),
Container: ................Holds the horizontal list of images.
ListView.builder: ...................Creates a horizontal scrollable list of images.
image: NetworkImage(url): ................Loads images from API.


✨ Favorite Icon (Wishlist)

✨ Icon(snapshot.data!.data![index].inWishlist! == false 
    ? Icons.favorite 
    : Icons.favorite_outline)
If the product is in wishlist, show a filled heart (❤️).
Otherwise, show an empty heart (🤍).


✨ If API Has No Data

✨ } else {
  return Text('Loading');
}

If the API request is still loading, show "Loading".
✅ Fix: Instead of Text('Loading'), use CircularProgressIndicator().



🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯



FutureBuilder<ProductsModel>(
                future: getProductsApi (),
                builder: (context , snapshot){
                  if(snapshot.hasData){
                    return ListView.builder(
                        itemCount: snapshot.data!.data!.length,
                        itemBuilder: (context, index){
                          return Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ListTile(
                                title: Text(snapshot.data!.data![index].shop!.name.toString()),
                                subtitle: Text(snapshot.data!.data![index].shop!.shopemail.toString()),
                                leading: CircleAvatar(
                                  backgroundImage: NetworkImage(snapshot.data!.data![index].shop!.image.toString()),
                                ),
                              ),
                              Container(
                                height: MediaQuery.of(context).size.height *.3,
                                width: MediaQuery.of(context).size.width * 1,
                                child: ListView.builder(
                                    scrollDirection: Axis.horizontal,
                                    itemCount: snapshot.data!.data![index].images!.length,
                                    itemBuilder: (context, position){
                                      return Padding(
                                        padding: const EdgeInsets.only(right: 10),
                                        child: Container(
                                          height: MediaQuery.of(context).size.height *.25,
                                          width: MediaQuery.of(context).size.width * .5,
                                          decoration: BoxDecoration(
                                              borderRadius: BorderRadius.circular(10),
                                              image: DecorationImage(
                                                  fit: BoxFit.cover,
                                                  image: NetworkImage(snapshot.data!.data![index].images![position].url.toString())
                                              )
                                          ),
                                        ),
                                      );
                                    }),
                              ),
                              Icon(snapshot.data!.data![index].inWishlist! == false ? Icons.favorite : Icons.favorite_outline)
                            ],
                          );
                        });
                  }else {
                    return Text('Loading');
                  }
                },
              ),



✨🗝️ This section of the code fetches API data and displays it dynamically using FutureBuilder. It creates a list of shops where each shop has:

Shop details (name, email, image)
A horizontal list of product images
A wishlist icon (favorite/unfavorite)


🔹 FutureBuilder Setup

FutureBuilder<ProductsModel>(
  future: getProductsApi(),
  builder: (context, snapshot) {
FutureBuilder<ProductsModel>:

✨ Handles asynchronous data (API call).
Expects a ProductsModel as the API response.
future: getProductsApi():
Calls the API function to fetch data.
builder: (context, snapshot):
snapshot contains the API response.
Used to check if data is available or still loading.


🔹 Handling API Data

if (snapshot.hasData) {
✨✅ If API data is available, proceed to display it.


🔹 Creating a Scrollable List

return ListView.builder(
  itemCount: snapshot.data!.data!.length,
  itemBuilder: (context, index) {
ListView.builder:

✨ Dynamically displays multiple items from API.
itemCount: Total number of shops.
itemBuilder: Builds each shop dynamically.


🔹 Displaying Shop Details

return Column(
  mainAxisAlignment: MainAxisAlignment.start,
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    ListTile(
      title: Text(snapshot.data!.data![index].shop!.name.toString()),
      subtitle: Text(snapshot.data!.data![index].shop!.shopemail.toString()),
      leading: CircleAvatar(
        backgroundImage: NetworkImage(snapshot.data!.data![index].shop!.image.toString()),
      ),
    ),

✨ Each shop is displayed as a ListTile.
title: Text(snapshot.data!.data![index].shop!.name.toString())
Displays shop name.
subtitle: Text(snapshot.data!.data![index].shop!.shopemail.toString())
Displays shop email.
leading: CircleAvatar(...)
Shows shop image as a circular avatar.


🔹 Horizontal Scrollable List of Product Images

Container(
  height: MediaQuery.of(context).size.height * 0.3,
  width: MediaQuery.of(context).size.width * 1,
  child: ListView.builder(
    scrollDirection: Axis.horizontal,
    itemCount: snapshot.data!.data![index].images!.length,
    itemBuilder: (context, position) {
Container:

✨ Holds a horizontal list of images.
height: MediaQuery.of(context).size.height * 0.3
Makes the container 30% of screen height.
width: MediaQuery.of(context).size.width * 1
Takes full screen width.
ListView.builder:
Creates a horizontal scrollable list.
scrollDirection: Axis.horizontal
Enables horizontal scrolling.
itemCount: snapshot.data!.data![index].images!.length
Gets the total number of images.


🔹 Displaying Each Product Image

return Padding(
  padding: const EdgeInsets.only(right: 10),
  child: Container(
    height: MediaQuery.of(context).size.height * 0.25,
    width: MediaQuery.of(context).size.width * 0.5,
    decoration: BoxDecoration(
      borderRadius: BorderRadius.circular(10),
      image: DecorationImage(
        fit: BoxFit.cover,
        image: NetworkImage(snapshot.data!.data![index].images![position].url.toString())
      )
    ),
  ),
);

✨ Padding: Adds right margin (10 pixels) for spacing.
Container: Displays each product image.
height: MediaQuery.of(context).size.height * 0.25
Image height is 25% of screen height.
width: MediaQuery.of(context).size.width * 0.5
Image width is 50% of screen width.
borderRadius: BorderRadius.circular(10):
Adds rounded corners to the image.
image: DecorationImage(...)
Uses NetworkImage(url) to load the image from API.
fit: BoxFit.cover: Ensures image covers the container.


🔹 Wishlist Icon (Favorite Button)

Icon(snapshot.data!.data![index].inWishlist! == false 
    ? Icons.favorite 
    : Icons.favorite_outline)

✨ Icons.favorite: If not in wishlist, show ❤️.
Icons.favorite_outline: If in wishlist, show 🤍.


🔹 Handling Loading State

} else {
  return Text('Loading');
}

✨ If API data is not available, show "Loading". ✅ Better Approach:
Instead of Text('Loading'), use:
return Center(child: CircularProgressIndicator());
This shows a loading spinner instead of just text.



✨🔹 Summary of Working Procedure

FutureBuilder calls API (getProductsApi()).
If API is loading → Show "Loading".
If API returns data:
Loop through shops using ListView.builder.
Display shop details (name, email, image).
Create a horizontal list of product images.
Show favorite/unfavorite icon.
User can scroll horizontally to see product images.

